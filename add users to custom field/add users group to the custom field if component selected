import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.event.type.EventDispatchOption
import com.atlassian.jira.issue.fields.CustomField
import com.atlassian.jira.user.ApplicationUser

def currentUser = ComponentAccessor.userManager.getUserByName("a.malikov");
//def issue = ComponentAccessor.issueManager.getIssueObject("IT-185")
def issue = event.issue;
def groupManager = ComponentAccessor.getGroupManager();
def groupUsers = groupManager.getUsersInGroup("[ИС]");

def assgineeCustomField = 10134L;
def issueUsers = getCustomFieldValue(issue, assgineeCustomField)?:[];
def arrayOfComponents = issue.getComponents();
def notContainUsers = [];

for(def comp in arrayOfComponents){
if(comp.getName()=="1C"){
    for(def newUser in groupUsers){
        if(!issueUsers.contains(newUser)){
            notContainUsers == groupUsers
        }
    }

}
}

if(issueUsers != null){
updateCustomFieldValue(issue, assgineeCustomField, groupUsers, currentUser);
}
// функции-------------------------------------------------------------------------------------------
issue.setCustomFieldValue(assgineeCustomField, notContainUsers.collect{it})
ComponentAccessor.getIssueManager().updateIssue(currentUser, issue, EventDispatchOption.ISSUE_UPDATED, false)

def getCustomFieldValue(issue, Long fieldId) {
issue.getCustomFieldValue(ComponentAccessor.customFieldManager.getCustomFieldObject(fieldId))
}
def getGroup(String groupName) {
ComponentAccessor.getGroupManager().getGroup(groupName)
}
def getUsersInGroup(group) {
ComponentAccessor.getGroupManager().getUsersInGroup(group)
}
def updateCustomFieldValue(issue, Long customFieldId, newValue) {
def customField = ComponentAccessor.customFieldManager.getCustomFieldObject(customFieldId)
//customField.updateValue(null, issue, new ModifiedValue(customField.getValue(issue), newValue), new DefaultIssueChangeHolder());
return issue
}
def updateCustomFieldValue(issue, Long customFieldId, newValue, user) {
def customField = ComponentAccessor.customFieldManager.getCustomFieldObject(customFieldId)
issue.setCustomFieldValue(customField, newValue)
ComponentAccessor.issueManager.updateIssue(user, issue, EventDispatchOption.ISSUE_UPDATED, false)
}

